block('dropdown')(
    def()(function() {
        applyCtx([{ elem : 'switcher' }, { elem : 'popup' }]);
    }),
    def()(function() {
        var ctx = this.ctx;

        ctx.js = this.extend(apply('js'), ctx.js);
        applyNext({ _dropdown : ctx });
    }),
    js()(function() {
        return { id : this.generateId() };
    }),
    elem('switcher').def()(function() {
        var dropdown = this._dropdown,
            switcher = dropdown.switcher;

        switcher.block && (switcher.mix = apply('mix'));

        applyCtx(switcher);
    }),
    elem('switcher').mix()(function() {
        var dropdown = this._dropdown,
            dropdownMix = dropdown.mix,
            switcherMix = dropdown.switcher.mix || [];

        Array.isArray(switcherMix) || (switcherMix = [switcherMix]);

        return switcherMix.concat(dropdownMix?
                    Array.isArray(dropdownMix)?
                        dropdownMix.concat([dropdown]) :
                        [dropdownMix, dropdown] :
                    dropdown);
    }),
    elem('popup').def()(function() {
        var dropdown = this._dropdown,
            popup = dropdown.popup;

        if(this.isSimple(popup) || popup.block !== 'popup') {
            popup = { block : 'popup', content : popup };
        }

        var popupMods = popup.mods || (popup.mods = {});
        popupMods.theme || (popupMods.theme = this.mods.theme);
        popupMods.hasOwnProperty('autoclosable') || (popupMods.autoclosable = true);

        popupMods.target = 'anchor';

        var popupMix = popup.mix || [];
        Array.isArray(popupMix) || (popupMix = [popupMix]);
        popup.mix = popupMix.concat([dropdown]);

        applyCtx(popup);
    })
);
